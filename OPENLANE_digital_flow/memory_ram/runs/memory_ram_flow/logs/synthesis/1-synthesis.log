
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v
Parsing SystemVerilog input from `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v' to AST representation.
Generating RTLIL representation for module `\memory_ram'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/runs/memory_ram_flow/tmp/synthesis/hierarchy.dot'.
Dumping module memory_ram to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \memory_ram

3.2. Analyzing design hierarchy..
Top module:  \memory_ram
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \memory_ram

5.2. Analyzing design hierarchy..
Top module:  \memory_ram
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:13$2 in module memory_ram.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:19$9'.
Creating decoders for process `\memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:13$2'.
     1/3: $1$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$8
     2/3: $1$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_DATA[31:0]$7
     3/3: $1$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_ADDR[7:0]$6

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\memory_ram.\data_out' using process `\memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:19$9'.
  created $dff cell `$procdff$20' with negative edge clock.
Creating register for signal `\memory_ram.$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_ADDR' using process `\memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:13$2'.
  created $dff cell `$procdff$21' with positive edge clock.
Creating register for signal `\memory_ram.$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_DATA' using process `\memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:13$2'.
  created $dff cell `$procdff$22' with positive edge clock.
Creating register for signal `\memory_ram.$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN' using process `\memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:13$2'.
  created $dff cell `$procdff$23' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:19$9'.
Found and cleaned up 1 empty switch in `\memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:13$2'.
Removing empty process `memory_ram.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:13$2'.
Cleaned up 1 empty switch.

17. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

18. Executing FLATTEN pass (flatten design).

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..
Removed 3 unused cells and 13 unused wires.
<suppressed ~4 debug messages>

21. Executing CHECK pass (checking for obvious problems).
Checking module memory_ram...
Found and reported 0 problems.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
    Consolidated identical input bits for $mux cell $procmux$12:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5
      New ports: A=1'0, B=1'1, Y=$0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0]
      New connections: $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [31:1] = { $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] $0$memwr$\memory$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/src/memory_ram.v:16$1_EN[31:0]$5 [0] }
  Optimizing cells in module \memory_ram.
Performed a total of 1 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module memory_ram:
  created 0 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing memory_ram.memory write port 0.

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\memory'[0] in module `\memory_ram': merging output FF to cell.

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..
Removed 1 unused cells and 33 unused wires.
<suppressed ~2 debug messages>

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.
<suppressed ~3 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \memory in module \memory_ram:
  created 256 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of memory_ram.memory: $\memory$rdreg[0]
  read interface: 1 $dff and 255 $mux cells.
  write interface: 256 write mux blocks.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.
<suppressed ~16 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~257 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..
Removed 0 unused cells and 520 unused wires.
<suppressed ~1 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~257 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\memory[9]$76 ($dff) from module memory_ram (D = \data_in, Q = \memory[9]).
Adding EN signal on $memory\memory[99]$256 ($dff) from module memory_ram (D = \data_in, Q = \memory[99]).
Adding EN signal on $memory\memory[98]$254 ($dff) from module memory_ram (D = \data_in, Q = \memory[98]).
Adding EN signal on $memory\memory[97]$252 ($dff) from module memory_ram (D = \data_in, Q = \memory[97]).
Adding EN signal on $memory\memory[96]$250 ($dff) from module memory_ram (D = \data_in, Q = \memory[96]).
Adding EN signal on $memory\memory[95]$248 ($dff) from module memory_ram (D = \data_in, Q = \memory[95]).
Adding EN signal on $memory\memory[94]$246 ($dff) from module memory_ram (D = \data_in, Q = \memory[94]).
Adding EN signal on $memory\memory[93]$244 ($dff) from module memory_ram (D = \data_in, Q = \memory[93]).
Adding EN signal on $memory\memory[92]$242 ($dff) from module memory_ram (D = \data_in, Q = \memory[92]).
Adding EN signal on $memory\memory[91]$240 ($dff) from module memory_ram (D = \data_in, Q = \memory[91]).
Adding EN signal on $memory\memory[90]$238 ($dff) from module memory_ram (D = \data_in, Q = \memory[90]).
Adding EN signal on $memory\memory[8]$74 ($dff) from module memory_ram (D = \data_in, Q = \memory[8]).
Adding EN signal on $memory\memory[89]$236 ($dff) from module memory_ram (D = \data_in, Q = \memory[89]).
Adding EN signal on $memory\memory[88]$234 ($dff) from module memory_ram (D = \data_in, Q = \memory[88]).
Adding EN signal on $memory\memory[87]$232 ($dff) from module memory_ram (D = \data_in, Q = \memory[87]).
Adding EN signal on $memory\memory[86]$230 ($dff) from module memory_ram (D = \data_in, Q = \memory[86]).
Adding EN signal on $memory\memory[85]$228 ($dff) from module memory_ram (D = \data_in, Q = \memory[85]).
Adding EN signal on $memory\memory[84]$226 ($dff) from module memory_ram (D = \data_in, Q = \memory[84]).
Adding EN signal on $memory\memory[83]$224 ($dff) from module memory_ram (D = \data_in, Q = \memory[83]).
Adding EN signal on $memory\memory[82]$222 ($dff) from module memory_ram (D = \data_in, Q = \memory[82]).
Adding EN signal on $memory\memory[81]$220 ($dff) from module memory_ram (D = \data_in, Q = \memory[81]).
Adding EN signal on $memory\memory[80]$218 ($dff) from module memory_ram (D = \data_in, Q = \memory[80]).
Adding EN signal on $memory\memory[7]$72 ($dff) from module memory_ram (D = \data_in, Q = \memory[7]).
Adding EN signal on $memory\memory[79]$216 ($dff) from module memory_ram (D = \data_in, Q = \memory[79]).
Adding EN signal on $memory\memory[78]$214 ($dff) from module memory_ram (D = \data_in, Q = \memory[78]).
Adding EN signal on $memory\memory[77]$212 ($dff) from module memory_ram (D = \data_in, Q = \memory[77]).
Adding EN signal on $memory\memory[76]$210 ($dff) from module memory_ram (D = \data_in, Q = \memory[76]).
Adding EN signal on $memory\memory[75]$208 ($dff) from module memory_ram (D = \data_in, Q = \memory[75]).
Adding EN signal on $memory\memory[74]$206 ($dff) from module memory_ram (D = \data_in, Q = \memory[74]).
Adding EN signal on $memory\memory[73]$204 ($dff) from module memory_ram (D = \data_in, Q = \memory[73]).
Adding EN signal on $memory\memory[72]$202 ($dff) from module memory_ram (D = \data_in, Q = \memory[72]).
Adding EN signal on $memory\memory[71]$200 ($dff) from module memory_ram (D = \data_in, Q = \memory[71]).
Adding EN signal on $memory\memory[70]$198 ($dff) from module memory_ram (D = \data_in, Q = \memory[70]).
Adding EN signal on $memory\memory[6]$70 ($dff) from module memory_ram (D = \data_in, Q = \memory[6]).
Adding EN signal on $memory\memory[69]$196 ($dff) from module memory_ram (D = \data_in, Q = \memory[69]).
Adding EN signal on $memory\memory[68]$194 ($dff) from module memory_ram (D = \data_in, Q = \memory[68]).
Adding EN signal on $memory\memory[67]$192 ($dff) from module memory_ram (D = \data_in, Q = \memory[67]).
Adding EN signal on $memory\memory[66]$190 ($dff) from module memory_ram (D = \data_in, Q = \memory[66]).
Adding EN signal on $memory\memory[65]$188 ($dff) from module memory_ram (D = \data_in, Q = \memory[65]).
Adding EN signal on $memory\memory[64]$186 ($dff) from module memory_ram (D = \data_in, Q = \memory[64]).
Adding EN signal on $memory\memory[63]$184 ($dff) from module memory_ram (D = \data_in, Q = \memory[63]).
Adding EN signal on $memory\memory[62]$182 ($dff) from module memory_ram (D = \data_in, Q = \memory[62]).
Adding EN signal on $memory\memory[61]$180 ($dff) from module memory_ram (D = \data_in, Q = \memory[61]).
Adding EN signal on $memory\memory[60]$178 ($dff) from module memory_ram (D = \data_in, Q = \memory[60]).
Adding EN signal on $memory\memory[5]$68 ($dff) from module memory_ram (D = \data_in, Q = \memory[5]).
Adding EN signal on $memory\memory[59]$176 ($dff) from module memory_ram (D = \data_in, Q = \memory[59]).
Adding EN signal on $memory\memory[58]$174 ($dff) from module memory_ram (D = \data_in, Q = \memory[58]).
Adding EN signal on $memory\memory[57]$172 ($dff) from module memory_ram (D = \data_in, Q = \memory[57]).
Adding EN signal on $memory\memory[56]$170 ($dff) from module memory_ram (D = \data_in, Q = \memory[56]).
Adding EN signal on $memory\memory[55]$168 ($dff) from module memory_ram (D = \data_in, Q = \memory[55]).
Adding EN signal on $memory\memory[54]$166 ($dff) from module memory_ram (D = \data_in, Q = \memory[54]).
Adding EN signal on $memory\memory[53]$164 ($dff) from module memory_ram (D = \data_in, Q = \memory[53]).
Adding EN signal on $memory\memory[52]$162 ($dff) from module memory_ram (D = \data_in, Q = \memory[52]).
Adding EN signal on $memory\memory[51]$160 ($dff) from module memory_ram (D = \data_in, Q = \memory[51]).
Adding EN signal on $memory\memory[50]$158 ($dff) from module memory_ram (D = \data_in, Q = \memory[50]).
Adding EN signal on $memory\memory[4]$66 ($dff) from module memory_ram (D = \data_in, Q = \memory[4]).
Adding EN signal on $memory\memory[49]$156 ($dff) from module memory_ram (D = \data_in, Q = \memory[49]).
Adding EN signal on $memory\memory[48]$154 ($dff) from module memory_ram (D = \data_in, Q = \memory[48]).
Adding EN signal on $memory\memory[47]$152 ($dff) from module memory_ram (D = \data_in, Q = \memory[47]).
Adding EN signal on $memory\memory[46]$150 ($dff) from module memory_ram (D = \data_in, Q = \memory[46]).
Adding EN signal on $memory\memory[45]$148 ($dff) from module memory_ram (D = \data_in, Q = \memory[45]).
Adding EN signal on $memory\memory[44]$146 ($dff) from module memory_ram (D = \data_in, Q = \memory[44]).
Adding EN signal on $memory\memory[43]$144 ($dff) from module memory_ram (D = \data_in, Q = \memory[43]).
Adding EN signal on $memory\memory[42]$142 ($dff) from module memory_ram (D = \data_in, Q = \memory[42]).
Adding EN signal on $memory\memory[41]$140 ($dff) from module memory_ram (D = \data_in, Q = \memory[41]).
Adding EN signal on $memory\memory[40]$138 ($dff) from module memory_ram (D = \data_in, Q = \memory[40]).
Adding EN signal on $memory\memory[3]$64 ($dff) from module memory_ram (D = \data_in, Q = \memory[3]).
Adding EN signal on $memory\memory[39]$136 ($dff) from module memory_ram (D = \data_in, Q = \memory[39]).
Adding EN signal on $memory\memory[38]$134 ($dff) from module memory_ram (D = \data_in, Q = \memory[38]).
Adding EN signal on $memory\memory[37]$132 ($dff) from module memory_ram (D = \data_in, Q = \memory[37]).
Adding EN signal on $memory\memory[36]$130 ($dff) from module memory_ram (D = \data_in, Q = \memory[36]).
Adding EN signal on $memory\memory[35]$128 ($dff) from module memory_ram (D = \data_in, Q = \memory[35]).
Adding EN signal on $memory\memory[34]$126 ($dff) from module memory_ram (D = \data_in, Q = \memory[34]).
Adding EN signal on $memory\memory[33]$124 ($dff) from module memory_ram (D = \data_in, Q = \memory[33]).
Adding EN signal on $memory\memory[32]$122 ($dff) from module memory_ram (D = \data_in, Q = \memory[32]).
Adding EN signal on $memory\memory[31]$120 ($dff) from module memory_ram (D = \data_in, Q = \memory[31]).
Adding EN signal on $memory\memory[30]$118 ($dff) from module memory_ram (D = \data_in, Q = \memory[30]).
Adding EN signal on $memory\memory[2]$62 ($dff) from module memory_ram (D = \data_in, Q = \memory[2]).
Adding EN signal on $memory\memory[29]$116 ($dff) from module memory_ram (D = \data_in, Q = \memory[29]).
Adding EN signal on $memory\memory[28]$114 ($dff) from module memory_ram (D = \data_in, Q = \memory[28]).
Adding EN signal on $memory\memory[27]$112 ($dff) from module memory_ram (D = \data_in, Q = \memory[27]).
Adding EN signal on $memory\memory[26]$110 ($dff) from module memory_ram (D = \data_in, Q = \memory[26]).
Adding EN signal on $memory\memory[25]$108 ($dff) from module memory_ram (D = \data_in, Q = \memory[25]).
Adding EN signal on $memory\memory[255]$568 ($dff) from module memory_ram (D = \data_in, Q = \memory[255]).
Adding EN signal on $memory\memory[254]$566 ($dff) from module memory_ram (D = \data_in, Q = \memory[254]).
Adding EN signal on $memory\memory[253]$564 ($dff) from module memory_ram (D = \data_in, Q = \memory[253]).
Adding EN signal on $memory\memory[252]$562 ($dff) from module memory_ram (D = \data_in, Q = \memory[252]).
Adding EN signal on $memory\memory[251]$560 ($dff) from module memory_ram (D = \data_in, Q = \memory[251]).
Adding EN signal on $memory\memory[250]$558 ($dff) from module memory_ram (D = \data_in, Q = \memory[250]).
Adding EN signal on $memory\memory[24]$106 ($dff) from module memory_ram (D = \data_in, Q = \memory[24]).
Adding EN signal on $memory\memory[249]$556 ($dff) from module memory_ram (D = \data_in, Q = \memory[249]).
Adding EN signal on $memory\memory[248]$554 ($dff) from module memory_ram (D = \data_in, Q = \memory[248]).
Adding EN signal on $memory\memory[247]$552 ($dff) from module memory_ram (D = \data_in, Q = \memory[247]).
Adding EN signal on $memory\memory[246]$550 ($dff) from module memory_ram (D = \data_in, Q = \memory[246]).
Adding EN signal on $memory\memory[245]$548 ($dff) from module memory_ram (D = \data_in, Q = \memory[245]).
Adding EN signal on $memory\memory[244]$546 ($dff) from module memory_ram (D = \data_in, Q = \memory[244]).
Adding EN signal on $memory\memory[243]$544 ($dff) from module memory_ram (D = \data_in, Q = \memory[243]).
Adding EN signal on $memory\memory[242]$542 ($dff) from module memory_ram (D = \data_in, Q = \memory[242]).
Adding EN signal on $memory\memory[241]$540 ($dff) from module memory_ram (D = \data_in, Q = \memory[241]).
Adding EN signal on $memory\memory[240]$538 ($dff) from module memory_ram (D = \data_in, Q = \memory[240]).
Adding EN signal on $memory\memory[23]$104 ($dff) from module memory_ram (D = \data_in, Q = \memory[23]).
Adding EN signal on $memory\memory[239]$536 ($dff) from module memory_ram (D = \data_in, Q = \memory[239]).
Adding EN signal on $memory\memory[238]$534 ($dff) from module memory_ram (D = \data_in, Q = \memory[238]).
Adding EN signal on $memory\memory[237]$532 ($dff) from module memory_ram (D = \data_in, Q = \memory[237]).
Adding EN signal on $memory\memory[236]$530 ($dff) from module memory_ram (D = \data_in, Q = \memory[236]).
Adding EN signal on $memory\memory[235]$528 ($dff) from module memory_ram (D = \data_in, Q = \memory[235]).
Adding EN signal on $memory\memory[234]$526 ($dff) from module memory_ram (D = \data_in, Q = \memory[234]).
Adding EN signal on $memory\memory[233]$524 ($dff) from module memory_ram (D = \data_in, Q = \memory[233]).
Adding EN signal on $memory\memory[232]$522 ($dff) from module memory_ram (D = \data_in, Q = \memory[232]).
Adding EN signal on $memory\memory[231]$520 ($dff) from module memory_ram (D = \data_in, Q = \memory[231]).
Adding EN signal on $memory\memory[230]$518 ($dff) from module memory_ram (D = \data_in, Q = \memory[230]).
Adding EN signal on $memory\memory[22]$102 ($dff) from module memory_ram (D = \data_in, Q = \memory[22]).
Adding EN signal on $memory\memory[229]$516 ($dff) from module memory_ram (D = \data_in, Q = \memory[229]).
Adding EN signal on $memory\memory[228]$514 ($dff) from module memory_ram (D = \data_in, Q = \memory[228]).
Adding EN signal on $memory\memory[227]$512 ($dff) from module memory_ram (D = \data_in, Q = \memory[227]).
Adding EN signal on $memory\memory[226]$510 ($dff) from module memory_ram (D = \data_in, Q = \memory[226]).
Adding EN signal on $memory\memory[225]$508 ($dff) from module memory_ram (D = \data_in, Q = \memory[225]).
Adding EN signal on $memory\memory[224]$506 ($dff) from module memory_ram (D = \data_in, Q = \memory[224]).
Adding EN signal on $memory\memory[223]$504 ($dff) from module memory_ram (D = \data_in, Q = \memory[223]).
Adding EN signal on $memory\memory[222]$502 ($dff) from module memory_ram (D = \data_in, Q = \memory[222]).
Adding EN signal on $memory\memory[221]$500 ($dff) from module memory_ram (D = \data_in, Q = \memory[221]).
Adding EN signal on $memory\memory[220]$498 ($dff) from module memory_ram (D = \data_in, Q = \memory[220]).
Adding EN signal on $memory\memory[21]$100 ($dff) from module memory_ram (D = \data_in, Q = \memory[21]).
Adding EN signal on $memory\memory[219]$496 ($dff) from module memory_ram (D = \data_in, Q = \memory[219]).
Adding EN signal on $memory\memory[218]$494 ($dff) from module memory_ram (D = \data_in, Q = \memory[218]).
Adding EN signal on $memory\memory[217]$492 ($dff) from module memory_ram (D = \data_in, Q = \memory[217]).
Adding EN signal on $memory\memory[216]$490 ($dff) from module memory_ram (D = \data_in, Q = \memory[216]).
Adding EN signal on $memory\memory[215]$488 ($dff) from module memory_ram (D = \data_in, Q = \memory[215]).
Adding EN signal on $memory\memory[214]$486 ($dff) from module memory_ram (D = \data_in, Q = \memory[214]).
Adding EN signal on $memory\memory[213]$484 ($dff) from module memory_ram (D = \data_in, Q = \memory[213]).
Adding EN signal on $memory\memory[212]$482 ($dff) from module memory_ram (D = \data_in, Q = \memory[212]).
Adding EN signal on $memory\memory[211]$480 ($dff) from module memory_ram (D = \data_in, Q = \memory[211]).
Adding EN signal on $memory\memory[210]$478 ($dff) from module memory_ram (D = \data_in, Q = \memory[210]).
Adding EN signal on $memory\memory[20]$98 ($dff) from module memory_ram (D = \data_in, Q = \memory[20]).
Adding EN signal on $memory\memory[209]$476 ($dff) from module memory_ram (D = \data_in, Q = \memory[209]).
Adding EN signal on $memory\memory[208]$474 ($dff) from module memory_ram (D = \data_in, Q = \memory[208]).
Adding EN signal on $memory\memory[207]$472 ($dff) from module memory_ram (D = \data_in, Q = \memory[207]).
Adding EN signal on $memory\memory[206]$470 ($dff) from module memory_ram (D = \data_in, Q = \memory[206]).
Adding EN signal on $memory\memory[205]$468 ($dff) from module memory_ram (D = \data_in, Q = \memory[205]).
Adding EN signal on $memory\memory[204]$466 ($dff) from module memory_ram (D = \data_in, Q = \memory[204]).
Adding EN signal on $memory\memory[203]$464 ($dff) from module memory_ram (D = \data_in, Q = \memory[203]).
Adding EN signal on $memory\memory[202]$462 ($dff) from module memory_ram (D = \data_in, Q = \memory[202]).
Adding EN signal on $memory\memory[201]$460 ($dff) from module memory_ram (D = \data_in, Q = \memory[201]).
Adding EN signal on $memory\memory[200]$458 ($dff) from module memory_ram (D = \data_in, Q = \memory[200]).
Adding EN signal on $memory\memory[1]$60 ($dff) from module memory_ram (D = \data_in, Q = \memory[1]).
Adding EN signal on $memory\memory[19]$96 ($dff) from module memory_ram (D = \data_in, Q = \memory[19]).
Adding EN signal on $memory\memory[199]$456 ($dff) from module memory_ram (D = \data_in, Q = \memory[199]).
Adding EN signal on $memory\memory[198]$454 ($dff) from module memory_ram (D = \data_in, Q = \memory[198]).
Adding EN signal on $memory\memory[197]$452 ($dff) from module memory_ram (D = \data_in, Q = \memory[197]).
Adding EN signal on $memory\memory[196]$450 ($dff) from module memory_ram (D = \data_in, Q = \memory[196]).
Adding EN signal on $memory\memory[195]$448 ($dff) from module memory_ram (D = \data_in, Q = \memory[195]).
Adding EN signal on $memory\memory[194]$446 ($dff) from module memory_ram (D = \data_in, Q = \memory[194]).
Adding EN signal on $memory\memory[193]$444 ($dff) from module memory_ram (D = \data_in, Q = \memory[193]).
Adding EN signal on $memory\memory[192]$442 ($dff) from module memory_ram (D = \data_in, Q = \memory[192]).
Adding EN signal on $memory\memory[191]$440 ($dff) from module memory_ram (D = \data_in, Q = \memory[191]).
Adding EN signal on $memory\memory[190]$438 ($dff) from module memory_ram (D = \data_in, Q = \memory[190]).
Adding EN signal on $memory\memory[18]$94 ($dff) from module memory_ram (D = \data_in, Q = \memory[18]).
Adding EN signal on $memory\memory[189]$436 ($dff) from module memory_ram (D = \data_in, Q = \memory[189]).
Adding EN signal on $memory\memory[188]$434 ($dff) from module memory_ram (D = \data_in, Q = \memory[188]).
Adding EN signal on $memory\memory[187]$432 ($dff) from module memory_ram (D = \data_in, Q = \memory[187]).
Adding EN signal on $memory\memory[186]$430 ($dff) from module memory_ram (D = \data_in, Q = \memory[186]).
Adding EN signal on $memory\memory[185]$428 ($dff) from module memory_ram (D = \data_in, Q = \memory[185]).
Adding EN signal on $memory\memory[184]$426 ($dff) from module memory_ram (D = \data_in, Q = \memory[184]).
Adding EN signal on $memory\memory[183]$424 ($dff) from module memory_ram (D = \data_in, Q = \memory[183]).
Adding EN signal on $memory\memory[182]$422 ($dff) from module memory_ram (D = \data_in, Q = \memory[182]).
Adding EN signal on $memory\memory[181]$420 ($dff) from module memory_ram (D = \data_in, Q = \memory[181]).
Adding EN signal on $memory\memory[180]$418 ($dff) from module memory_ram (D = \data_in, Q = \memory[180]).
Adding EN signal on $memory\memory[17]$92 ($dff) from module memory_ram (D = \data_in, Q = \memory[17]).
Adding EN signal on $memory\memory[179]$416 ($dff) from module memory_ram (D = \data_in, Q = \memory[179]).
Adding EN signal on $memory\memory[178]$414 ($dff) from module memory_ram (D = \data_in, Q = \memory[178]).
Adding EN signal on $memory\memory[177]$412 ($dff) from module memory_ram (D = \data_in, Q = \memory[177]).
Adding EN signal on $memory\memory[176]$410 ($dff) from module memory_ram (D = \data_in, Q = \memory[176]).
Adding EN signal on $memory\memory[175]$408 ($dff) from module memory_ram (D = \data_in, Q = \memory[175]).
Adding EN signal on $memory\memory[174]$406 ($dff) from module memory_ram (D = \data_in, Q = \memory[174]).
Adding EN signal on $memory\memory[173]$404 ($dff) from module memory_ram (D = \data_in, Q = \memory[173]).
Adding EN signal on $memory\memory[172]$402 ($dff) from module memory_ram (D = \data_in, Q = \memory[172]).
Adding EN signal on $memory\memory[171]$400 ($dff) from module memory_ram (D = \data_in, Q = \memory[171]).
Adding EN signal on $memory\memory[170]$398 ($dff) from module memory_ram (D = \data_in, Q = \memory[170]).
Adding EN signal on $memory\memory[16]$90 ($dff) from module memory_ram (D = \data_in, Q = \memory[16]).
Adding EN signal on $memory\memory[169]$396 ($dff) from module memory_ram (D = \data_in, Q = \memory[169]).
Adding EN signal on $memory\memory[168]$394 ($dff) from module memory_ram (D = \data_in, Q = \memory[168]).
Adding EN signal on $memory\memory[167]$392 ($dff) from module memory_ram (D = \data_in, Q = \memory[167]).
Adding EN signal on $memory\memory[166]$390 ($dff) from module memory_ram (D = \data_in, Q = \memory[166]).
Adding EN signal on $memory\memory[165]$388 ($dff) from module memory_ram (D = \data_in, Q = \memory[165]).
Adding EN signal on $memory\memory[164]$386 ($dff) from module memory_ram (D = \data_in, Q = \memory[164]).
Adding EN signal on $memory\memory[163]$384 ($dff) from module memory_ram (D = \data_in, Q = \memory[163]).
Adding EN signal on $memory\memory[162]$382 ($dff) from module memory_ram (D = \data_in, Q = \memory[162]).
Adding EN signal on $memory\memory[161]$380 ($dff) from module memory_ram (D = \data_in, Q = \memory[161]).
Adding EN signal on $memory\memory[160]$378 ($dff) from module memory_ram (D = \data_in, Q = \memory[160]).
Adding EN signal on $memory\memory[15]$88 ($dff) from module memory_ram (D = \data_in, Q = \memory[15]).
Adding EN signal on $memory\memory[159]$376 ($dff) from module memory_ram (D = \data_in, Q = \memory[159]).
Adding EN signal on $memory\memory[158]$374 ($dff) from module memory_ram (D = \data_in, Q = \memory[158]).
Adding EN signal on $memory\memory[157]$372 ($dff) from module memory_ram (D = \data_in, Q = \memory[157]).
Adding EN signal on $memory\memory[156]$370 ($dff) from module memory_ram (D = \data_in, Q = \memory[156]).
Adding EN signal on $memory\memory[155]$368 ($dff) from module memory_ram (D = \data_in, Q = \memory[155]).
Adding EN signal on $memory\memory[154]$366 ($dff) from module memory_ram (D = \data_in, Q = \memory[154]).
Adding EN signal on $memory\memory[153]$364 ($dff) from module memory_ram (D = \data_in, Q = \memory[153]).
Adding EN signal on $memory\memory[152]$362 ($dff) from module memory_ram (D = \data_in, Q = \memory[152]).
Adding EN signal on $memory\memory[151]$360 ($dff) from module memory_ram (D = \data_in, Q = \memory[151]).
Adding EN signal on $memory\memory[150]$358 ($dff) from module memory_ram (D = \data_in, Q = \memory[150]).
Adding EN signal on $memory\memory[14]$86 ($dff) from module memory_ram (D = \data_in, Q = \memory[14]).
Adding EN signal on $memory\memory[149]$356 ($dff) from module memory_ram (D = \data_in, Q = \memory[149]).
Adding EN signal on $memory\memory[148]$354 ($dff) from module memory_ram (D = \data_in, Q = \memory[148]).
Adding EN signal on $memory\memory[147]$352 ($dff) from module memory_ram (D = \data_in, Q = \memory[147]).
Adding EN signal on $memory\memory[146]$350 ($dff) from module memory_ram (D = \data_in, Q = \memory[146]).
Adding EN signal on $memory\memory[145]$348 ($dff) from module memory_ram (D = \data_in, Q = \memory[145]).
Adding EN signal on $memory\memory[144]$346 ($dff) from module memory_ram (D = \data_in, Q = \memory[144]).
Adding EN signal on $memory\memory[143]$344 ($dff) from module memory_ram (D = \data_in, Q = \memory[143]).
Adding EN signal on $memory\memory[142]$342 ($dff) from module memory_ram (D = \data_in, Q = \memory[142]).
Adding EN signal on $memory\memory[141]$340 ($dff) from module memory_ram (D = \data_in, Q = \memory[141]).
Adding EN signal on $memory\memory[140]$338 ($dff) from module memory_ram (D = \data_in, Q = \memory[140]).
Adding EN signal on $memory\memory[13]$84 ($dff) from module memory_ram (D = \data_in, Q = \memory[13]).
Adding EN signal on $memory\memory[139]$336 ($dff) from module memory_ram (D = \data_in, Q = \memory[139]).
Adding EN signal on $memory\memory[138]$334 ($dff) from module memory_ram (D = \data_in, Q = \memory[138]).
Adding EN signal on $memory\memory[137]$332 ($dff) from module memory_ram (D = \data_in, Q = \memory[137]).
Adding EN signal on $memory\memory[136]$330 ($dff) from module memory_ram (D = \data_in, Q = \memory[136]).
Adding EN signal on $memory\memory[135]$328 ($dff) from module memory_ram (D = \data_in, Q = \memory[135]).
Adding EN signal on $memory\memory[134]$326 ($dff) from module memory_ram (D = \data_in, Q = \memory[134]).
Adding EN signal on $memory\memory[133]$324 ($dff) from module memory_ram (D = \data_in, Q = \memory[133]).
Adding EN signal on $memory\memory[132]$322 ($dff) from module memory_ram (D = \data_in, Q = \memory[132]).
Adding EN signal on $memory\memory[131]$320 ($dff) from module memory_ram (D = \data_in, Q = \memory[131]).
Adding EN signal on $memory\memory[130]$318 ($dff) from module memory_ram (D = \data_in, Q = \memory[130]).
Adding EN signal on $memory\memory[12]$82 ($dff) from module memory_ram (D = \data_in, Q = \memory[12]).
Adding EN signal on $memory\memory[129]$316 ($dff) from module memory_ram (D = \data_in, Q = \memory[129]).
Adding EN signal on $memory\memory[128]$314 ($dff) from module memory_ram (D = \data_in, Q = \memory[128]).
Adding EN signal on $memory\memory[127]$312 ($dff) from module memory_ram (D = \data_in, Q = \memory[127]).
Adding EN signal on $memory\memory[126]$310 ($dff) from module memory_ram (D = \data_in, Q = \memory[126]).
Adding EN signal on $memory\memory[125]$308 ($dff) from module memory_ram (D = \data_in, Q = \memory[125]).
Adding EN signal on $memory\memory[124]$306 ($dff) from module memory_ram (D = \data_in, Q = \memory[124]).
Adding EN signal on $memory\memory[123]$304 ($dff) from module memory_ram (D = \data_in, Q = \memory[123]).
Adding EN signal on $memory\memory[122]$302 ($dff) from module memory_ram (D = \data_in, Q = \memory[122]).
Adding EN signal on $memory\memory[121]$300 ($dff) from module memory_ram (D = \data_in, Q = \memory[121]).
Adding EN signal on $memory\memory[120]$298 ($dff) from module memory_ram (D = \data_in, Q = \memory[120]).
Adding EN signal on $memory\memory[11]$80 ($dff) from module memory_ram (D = \data_in, Q = \memory[11]).
Adding EN signal on $memory\memory[119]$296 ($dff) from module memory_ram (D = \data_in, Q = \memory[119]).
Adding EN signal on $memory\memory[118]$294 ($dff) from module memory_ram (D = \data_in, Q = \memory[118]).
Adding EN signal on $memory\memory[117]$292 ($dff) from module memory_ram (D = \data_in, Q = \memory[117]).
Adding EN signal on $memory\memory[116]$290 ($dff) from module memory_ram (D = \data_in, Q = \memory[116]).
Adding EN signal on $memory\memory[115]$288 ($dff) from module memory_ram (D = \data_in, Q = \memory[115]).
Adding EN signal on $memory\memory[114]$286 ($dff) from module memory_ram (D = \data_in, Q = \memory[114]).
Adding EN signal on $memory\memory[113]$284 ($dff) from module memory_ram (D = \data_in, Q = \memory[113]).
Adding EN signal on $memory\memory[112]$282 ($dff) from module memory_ram (D = \data_in, Q = \memory[112]).
Adding EN signal on $memory\memory[111]$280 ($dff) from module memory_ram (D = \data_in, Q = \memory[111]).
Adding EN signal on $memory\memory[110]$278 ($dff) from module memory_ram (D = \data_in, Q = \memory[110]).
Adding EN signal on $memory\memory[10]$78 ($dff) from module memory_ram (D = \data_in, Q = \memory[10]).
Adding EN signal on $memory\memory[109]$276 ($dff) from module memory_ram (D = \data_in, Q = \memory[109]).
Adding EN signal on $memory\memory[108]$274 ($dff) from module memory_ram (D = \data_in, Q = \memory[108]).
Adding EN signal on $memory\memory[107]$272 ($dff) from module memory_ram (D = \data_in, Q = \memory[107]).
Adding EN signal on $memory\memory[106]$270 ($dff) from module memory_ram (D = \data_in, Q = \memory[106]).
Adding EN signal on $memory\memory[105]$268 ($dff) from module memory_ram (D = \data_in, Q = \memory[105]).
Adding EN signal on $memory\memory[104]$266 ($dff) from module memory_ram (D = \data_in, Q = \memory[104]).
Adding EN signal on $memory\memory[103]$264 ($dff) from module memory_ram (D = \data_in, Q = \memory[103]).
Adding EN signal on $memory\memory[102]$262 ($dff) from module memory_ram (D = \data_in, Q = \memory[102]).
Adding EN signal on $memory\memory[101]$260 ($dff) from module memory_ram (D = \data_in, Q = \memory[101]).
Adding EN signal on $memory\memory[100]$258 ($dff) from module memory_ram (D = \data_in, Q = \memory[100]).
Adding EN signal on $memory\memory[0]$58 ($dff) from module memory_ram (D = \data_in, Q = \memory[0]).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..
Removed 256 unused cells and 256 unused wires.
<suppressed ~257 debug messages>

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /foss/tools/yosys/1010756/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/1010756/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~1153 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\memory_ram' to `<abc-temp-dir>/input.blif'..
Extracted 8728 gates and 16929 wires to a netlist network with 8201 inputs and 288 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               MUX cells:     8160
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:              NAND cells:        4
ABC RESULTS:                OR cells:      292
ABC RESULTS:            ANDNOT cells:      256
ABC RESULTS:        internal signals:     8440
ABC RESULTS:           input signals:     8201
ABC RESULTS:          output signals:      288
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.
<suppressed ~4064 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..
Removed 7 unused cells and 9062 unused wires.
<suppressed ~8 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \memory_ram

40.2. Analyzing design hierarchy..
Top module:  \memory_ram
Removed 0 unused modules.

41. Printing statistics.

=== memory_ram ===

   Number of wires:               8950
   Number of wire bits:          16986
   Number of public wires:         261
   Number of public wire bits:    8266
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16944
     $_ANDNOT_                     256
     $_DFFE_PP_                   8192
     $_DFF_N_                       32
     $_MUX_                       8160
     $_NAND_                         4
     $_ORNOT_                        8
     $_OR_                         292

42. Executing CHECK pass (checking for obvious problems).
Checking module memory_ram...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/runs/memory_ram_flow/tmp/synthesis/post_techmap.dot'.
Dumping module memory_ram to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \memory_ram..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \memory_ram.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\memory_ram'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module memory_ram.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..

47. Printing statistics.

=== memory_ram ===

   Number of wires:               8950
   Number of wire bits:          16986
   Number of public wires:         261
   Number of public wire bits:    8266
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16944
     $_ANDNOT_                     256
     $_DFFE_PP_                   8192
     $_DFF_N_                       32
     $_MUX_                       8160
     $_NAND_                         4
     $_ORNOT_                        8
     $_OR_                         292

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\memory_ram':
  mapped 8224 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== memory_ram ===

   Number of wires:              17174
   Number of wire bits:          25210
   Number of public wires:         261
   Number of public wire bits:    8266
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              25168
     $_ANDNOT_                     256
     $_MUX_                      16352
     $_NAND_                         4
     $_NOT_                         32
     $_ORNOT_                        8
     $_OR_                         292
     sky130_fd_sc_hd__dfxtp_2     8224

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\memory_ram' to `/tmp/yosys-abc-cOinQX/input.blif'..
Extracted 16944 gates and 25178 wires to a netlist network with 8234 inputs and 8256 outputs.

54.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/1010756/bin/yosys-abc" -s -f /tmp/yosys-abc-cOinQX/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-cOinQX/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-cOinQX/input.blif 
ABC: + read_lib -w /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/runs/memory_ram_flow/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/runs/memory_ram_flow/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/runs/memory_ram_flow/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/memory_ram/runs/memory_ram_flow/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 30000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 30000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 
ABC: + upsize -D 30000.0 
ABC: Current delay (2605.92 ps) does not exceed the target delay (30000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 30000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =  24839 ( 44.5 %)   Cap = 12.6 ff ( 12.8 %)   Area =   199528.86 ( 52.2 %)   Delay =  3904.09 ps  (  7.3 %)               
ABC: Path  0 --       3 : 0    2 pi                        A =   0.00  Df =  13.8   -8.2 ps  S =  25.0 ps  Cin =  0.0 ff  Cout =   3.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --   16506 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 247.8  -89.0 ps  S = 278.0 ps  Cin =  2.1 ff  Cout =  23.1 ff  Cmax = 130.0 ff  G = 1055  
ABC: Path  2 --   16557 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 608.7 -211.6 ps  S = 386.2 ps  Cin =  2.1 ff  Cout =  32.6 ff  Cmax = 130.0 ff  G = 1478  
ABC: Path  3 --   16573 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1146.5 -417.5 ps  S = 630.4 ps  Cin =  2.1 ff  Cout =  54.1 ff  Cmax = 130.0 ff  G = 2434  
ABC: Path  4 --   16574 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1666.2 -585.2 ps  S = 580.2 ps  Cin =  2.1 ff  Cout =  49.8 ff  Cmax = 130.0 ff  G = 2242  
ABC: Path  5 --   17766 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2191.9 -761.1 ps  S = 593.5 ps  Cin =  2.1 ff  Cout =  50.9 ff  Cmax = 130.0 ff  G = 2295  
ABC: Path  6 --   21200 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =2596.1 -788.4 ps  S =  55.9 ps  Cin =  2.3 ff  Cout =   5.1 ff  Cmax = 297.6 ff  G =  213  
ABC: Path  7 --   21202 : 3    1 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =2643.9 -714.2 ps  S =  77.1 ps  Cin =  4.6 ff  Cout =   2.4 ff  Cmax = 128.2 ff  G =   50  
ABC: Path  8 --   21211 : 5    1 sky130_fd_sc_hd__o32a_2   A =  11.26  Df =2999.2 -930.2 ps  S =  49.7 ps  Cin =  2.3 ff  Cout =   1.8 ff  Cmax = 300.3 ff  G =   75  
ABC: Path  9 --   21225 : 6    1 sky130_fd_sc_hd__mux4_2   A =  22.52  Df =3459.0 -989.0 ps  S =  86.2 ps  Cin =  2.6 ff  Cout =   4.7 ff  Cmax = 301.2 ff  G =  166  
ABC: Path 10 --   21264 : 4    1 sky130_fd_sc_hd__o211ai_2 A =  12.51  Df =3594.9 -889.9 ps  S = 109.0 ps  Cin =  4.4 ff  Cout =   2.4 ff  Cmax = 133.7 ff  G =   52  
ABC: Path 11 --   21265 : 5    1 sky130_fd_sc_hd__o221a_2  A =  11.26  Df =3904.1 -885.3 ps  S = 196.6 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 281.1 ff  G = 1424  
ABC: Start-point = pi2 (\data_addr [0]).  End-point = po21 ($\memory$rdreg[0]$d [21]).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 8234/ 8256  lat =    0  nd = 24839  edge =  59660  area =199483.84  delay =14.00  lev = 14
ABC: + write_blif /tmp/yosys-abc-cOinQX/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       79
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       70
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      201
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       85
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:     1542
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:      282
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      834
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:      159
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:     1130
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:      188
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       66
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      139
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:      196
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      267
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     8201
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:    11008
ABC RESULTS:        internal signals:     8688
ABC RESULTS:           input signals:     8234
ABC RESULTS:          output signals:     8256
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \memory_ram..
Removed 0 unused cells and 25178 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module memory_ram...
Warning: Wire memory_ram.\data_out [31] is used but has no driver.
Warning: Wire memory_ram.\data_out [30] is used but has no driver.
Warning: Wire memory_ram.\data_out [29] is used but has no driver.
Warning: Wire memory_ram.\data_out [28] is used but has no driver.
Warning: Wire memory_ram.\data_out [27] is used but has no driver.
Warning: Wire memory_ram.\data_out [26] is used but has no driver.
Warning: Wire memory_ram.\data_out [25] is used but has no driver.
Warning: Wire memory_ram.\data_out [24] is used but has no driver.
Warning: Wire memory_ram.\data_out [23] is used but has no driver.
Warning: Wire memory_ram.\data_out [22] is used but has no driver.
Warning: Wire memory_ram.\data_out [21] is used but has no driver.
Warning: Wire memory_ram.\data_out [20] is used but has no driver.
Warning: Wire memory_ram.\data_out [19] is used but has no driver.
Warning: Wire memory_ram.\data_out [18] is used but has no driver.
Warning: Wire memory_ram.\data_out [17] is used but has no driver.
Warning: Wire memory_ram.\data_out [16] is used but has no driver.
Warning: Wire memory_ram.\data_out [15] is used but has no driver.
Warning: Wire memory_ram.\data_out [14] is used but has no driver.
Warning: Wire memory_ram.\data_out [13] is used but has no driver.
Warning: Wire memory_ram.\data_out [12] is used but has no driver.
Warning: Wire memory_ram.\data_out [11] is used but has no driver.
Warning: Wire memory_ram.\data_out [10] is used but has no driver.
Warning: Wire memory_ram.\data_out [9] is used but has no driver.
Warning: Wire memory_ram.\data_out [8] is used but has no driver.
Warning: Wire memory_ram.\data_out [7] is used but has no driver.
Warning: Wire memory_ram.\data_out [6] is used but has no driver.
Warning: Wire memory_ram.\data_out [5] is used but has no driver.
Warning: Wire memory_ram.\data_out [4] is used but has no driver.
Warning: Wire memory_ram.\data_out [3] is used but has no driver.
Warning: Wire memory_ram.\data_out [2] is used but has no driver.
Warning: Wire memory_ram.\data_out [1] is used but has no driver.
Warning: Wire memory_ram.\data_out [0] is used but has no driver.
Found and reported 32 problems.

61. Printing statistics.

=== memory_ram ===

   Number of wires:              33036
   Number of wire bits:          33105
   Number of public wires:        8197
   Number of public wire bits:    8266
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              33063
     sky130_fd_sc_hd__a2111o_2       4
     sky130_fd_sc_hd__a211o_2      282
     sky130_fd_sc_hd__a211oi_2      17
     sky130_fd_sc_hd__a21bo_2        2
     sky130_fd_sc_hd__a21o_2       201
     sky130_fd_sc_hd__a21oi_2       49
     sky130_fd_sc_hd__a221o_2     1542
     sky130_fd_sc_hd__a221oi_2      23
     sky130_fd_sc_hd__a22o_2      1130
     sky130_fd_sc_hd__a22oi_2       40
     sky130_fd_sc_hd__a2bb2o_2       9
     sky130_fd_sc_hd__a311o_2        3
     sky130_fd_sc_hd__a31o_2       159
     sky130_fd_sc_hd__a31oi_2        5
     sky130_fd_sc_hd__a32o_2        70
     sky130_fd_sc_hd__a32oi_2        7
     sky130_fd_sc_hd__a41o_2         9
     sky130_fd_sc_hd__and2_2        30
     sky130_fd_sc_hd__and2b_2        3
     sky130_fd_sc_hd__and3_2       196
     sky130_fd_sc_hd__and3b_2        4
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1      11008
     sky130_fd_sc_hd__dfxtp_2     8224
     sky130_fd_sc_hd__inv_2         38
     sky130_fd_sc_hd__mux2_2      8201
     sky130_fd_sc_hd__mux4_2       834
     sky130_fd_sc_hd__nand2_2       66
     sky130_fd_sc_hd__nand3_2       24
     sky130_fd_sc_hd__nor2_2       267
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__o211a_2       85
     sky130_fd_sc_hd__o211ai_2       5
     sky130_fd_sc_hd__o21a_2       188
     sky130_fd_sc_hd__o21ai_2       79
     sky130_fd_sc_hd__o221a_2       53
     sky130_fd_sc_hd__o221ai_2       6
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o311a_2        6
     sky130_fd_sc_hd__o31a_2        24
     sky130_fd_sc_hd__o32a_2        14
     sky130_fd_sc_hd__or2_2        139
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or3b_2         4
     sky130_fd_sc_hd__or4_2          1

   Chip area for module '\memory_ram': 374456.633600

62. Executing Verilog backend.
Dumping module `\memory_ram'.

Warnings: 32 unique messages, 32 total
End of script. Logfile hash: f8fe159732, CPU: user 6.59s system 0.06s, MEM: 126.83 MB peak
Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)
Time spent: 83% 2x abc (31 sec), 7% 2x write_verilog (2 sec), ...
