
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v
Parsing SystemVerilog input from `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/runs/alu_flow/tmp/synthesis/hierarchy.dot'.
Dumping module alu to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \alu

3.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \alu

5.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:9$1 in module alu.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:9$1'.
     1/1: $1\data_out[31:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu.\data_out' from process `\alu.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:9$1'.

14. Executing PROC_DFF pass (convert process syncs to FFs).

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:9$1'.
Removing empty process `alu.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:9$1'.
Cleaned up 1 empty switch.

17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

18. Executing FLATTEN pass (flatten design).

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

21. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

22.9. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell alu.$ternary$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:14$6 ($mux).
Removed top 31 bits (of 32) from mux cell alu.$ternary$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:15$8 ($mux).
Removed top 31 bits (of 32) from mux cell alu.$ternary$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:21$15 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$18_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$24_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$25_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$26_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$27_CMP0 ($eq).
Removed top 31 bits (of 32) from wire alu.$ternary$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:14$6_Y.
Removed top 31 bits (of 32) from wire alu.$ternary$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:15$8_Y.
Removed top 31 bits (of 32) from wire alu.$ternary$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:21$15_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:11$2 ($add).
  creating $macc model for $sub$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:12$3 ($sub).
  creating $alu model for $macc $sub$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:12$3.
  creating $alu model for $macc $add$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:11$2.
  creating $alu model for $lt$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:14$5 ($lt): new $alu
  creating $alu model for $lt$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:15$7 ($lt): new $alu
  creating $alu model for $eq$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:21$14 ($eq): merged with $lt$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:15$7.
  creating $alu cell for $lt$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:15$7, $eq$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:21$14: $auto$alumacc.cc:485:replace_alu$34
  creating $alu cell for $lt$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:14$5: $auto$alumacc.cc:485:replace_alu$45
  creating $alu cell for $add$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:11$2: $auto$alumacc.cc:485:replace_alu$58
  creating $alu cell for $sub$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:12$3: $auto$alumacc.cc:485:replace_alu$61
  created 4 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:18$11 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$21_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:17$10 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$22_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/src/alu.v:13$4 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$26_CMP.
    No candidates found.

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 2 unused cells and 5 unused wires.
<suppressed ~3 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~4 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$17 in front of them:
        $auto$alumacc.cc:485:replace_alu$61
        $auto$alumacc.cc:485:replace_alu$58

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$17: { $procmux$26_CMP $procmux$25_CMP $procmux$24_CMP $procmux$23_CMP $procmux$22_CMP $procmux$21_CMP $procmux$20_CMP $procmux$19_CMP $procmux$18_CMP }
  Optimizing cells in module \alu.
Performed a total of 1 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /foss/tools/yosys/1010756/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/1010756/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$adfa61f2ba6b44ed6866b8ecd7b91c39c0061bd9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$80834bdd89ff0e27a02312429a7cc3a2e63489a8\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~2374 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~548 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~1308 debug messages>
Removed a total of 436 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 96 unused cells and 567 unused wires.
<suppressed ~97 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1788 gates and 1857 wires to a netlist network with 68 inputs and 32 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:             ORNOT cells:       50
ABC RESULTS:               NOT cells:       61
ABC RESULTS:              NAND cells:       48
ABC RESULTS:               NOR cells:       78
ABC RESULTS:               XOR cells:       87
ABC RESULTS:              XNOR cells:       39
ABC RESULTS:            ANDNOT cells:      376
ABC RESULTS:                OR cells:      427
ABC RESULTS:               MUX cells:      538
ABC RESULTS:        internal signals:     1757
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       32
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~253 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 1 unused cells and 454 unused wires.
<suppressed ~2 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \alu

40.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

41. Printing statistics.

=== alu ===

   Number of wires:               1683
   Number of wire bits:           1779
   Number of public wires:           4
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1711
     $_ANDNOT_                     376
     $_AND_                          8
     $_MUX_                        538
     $_NAND_                        48
     $_NOR_                         78
     $_NOT_                         60
     $_ORNOT_                       50
     $_OR_                         427
     $_XNOR_                        39
     $_XOR_                         87

42. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/runs/alu_flow/tmp/synthesis/post_techmap.dot'.
Dumping module alu to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

47. Printing statistics.

=== alu ===

   Number of wires:               1683
   Number of wire bits:           1779
   Number of public wires:           4
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1711
     $_ANDNOT_                     376
     $_AND_                          8
     $_MUX_                        538
     $_NAND_                        48
     $_NOR_                         78
     $_NOT_                         60
     $_ORNOT_                       50
     $_OR_                         427
     $_XNOR_                        39
     $_XOR_                         87

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':

53. Printing statistics.

=== alu ===

   Number of wires:               1683
   Number of wire bits:           1779
   Number of public wires:           4
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1711
     $_ANDNOT_                     376
     $_AND_                          8
     $_MUX_                        538
     $_NAND_                        48
     $_NOR_                         78
     $_NOT_                         60
     $_ORNOT_                       50
     $_OR_                         427
     $_XNOR_                        39
     $_XOR_                         87

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\alu' to `/tmp/yosys-abc-gqpbyo/input.blif'..
Extracted 1711 gates and 1779 wires to a netlist network with 68 inputs and 32 outputs.

54.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/1010756/bin/yosys-abc" -s -f /tmp/yosys-abc-gqpbyo/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-gqpbyo/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-gqpbyo/input.blif 
ABC: + read_lib -w /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/runs/alu_flow/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/runs/alu_flow/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/runs/alu_flow/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/alu/runs/alu_flow/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 
ABC: + upsize -D 10000.0 
ABC: Current delay (5187.33 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1174 ( 10.5 %)   Cap =  8.7 ff (  2.9 %)   Area =    10435.01 ( 88.4 %)   Delay =  5258.18 ps  (  7.6 %)               
ABC: Path  0 --      14 : 0    8 pi                        A =   0.00  Df = 112.9  -61.5 ps  S = 165.6 ps  Cin =  0.0 ff  Cout =  35.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     718 : 4    7 sky130_fd_sc_hd__or4_2    A =   8.76  Df = 779.1 -476.4 ps  S = 142.6 ps  Cin =  1.5 ff  Cout =  14.4 ff  Cmax = 310.4 ff  G =  896  
ABC: Path  2 --     826 : 4    4 sky130_fd_sc_hd__o31a_2   A =  10.01  Df =1139.7 -420.6 ps  S = 108.8 ps  Cin =  2.3 ff  Cout =  17.1 ff  Cmax = 285.7 ff  G =  701  
ABC: Path  3 --     877 : 3    2 sky130_fd_sc_hd__or3b_2   A =   8.76  Df =1628.1 -769.1 ps  S =  88.8 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 269.2 ff  G =  394  
ABC: Path  4 --     879 : 3    3 sky130_fd_sc_hd__and3_2   A =   7.51  Df =1853.9 -333.7 ps  S =  71.3 ps  Cin =  1.5 ff  Cout =   8.7 ff  Cmax = 309.5 ff  G =  557  
ABC: Path  5 --     881 : 2    4 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =2061.9 -222.4 ps  S = 215.9 ps  Cin =  4.4 ff  Cout =  17.9 ff  Cmax = 141.9 ff  G =  389  
ABC: Path  6 --     934 : 4    2 sky130_fd_sc_hd__or4bb_2  A =  12.51  Df =2688.4 -647.9 ps  S =  94.1 ps  Cin =  1.5 ff  Cout =   3.2 ff  Cmax = 312.2 ff  G =  207  
ABC: Path  7 --     936 : 3    2 sky130_fd_sc_hd__or3_2    A =   7.51  Df =3111.7 -549.1 ps  S =  80.6 ps  Cin =  1.5 ff  Cout =   3.9 ff  Cmax = 310.4 ff  G =  250  
ABC: Path  8 --    1100 : 5    3 sky130_fd_sc_hd__a311o_2  A =  11.26  Df =3506.7 -759.1 ps  S =  72.7 ps  Cin =  2.3 ff  Cout =   9.6 ff  Cmax = 298.5 ff  G =  404  
ABC: Path  9 --    1202 : 5    2 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =3940.1-1052.2 ps  S =  72.9 ps  Cin =  2.4 ff  Cout =   6.1 ff  Cmax = 324.1 ff  G =  246  
ABC: Path 10 --    1212 : 3    5 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =4166.6-1206.4 ps  S = 218.7 ps  Cin =  4.6 ff  Cout =  15.9 ff  Cmax = 128.2 ff  G =  327  
ABC: Path 11 --    1225 : 3    1 sky130_fd_sc_hd__o21ai_2  A =   8.76  Df =4226.5-1170.3 ps  S =  71.8 ps  Cin =  4.5 ff  Cout =   1.5 ff  Cmax = 139.2 ff  G =   33  
ABC: Path 12 --    1227 : 3    1 sky130_fd_sc_hd__and3_2   A =   7.51  Df =4468.5  -62.7 ps  S =  36.9 ps  Cin =  1.5 ff  Cout =   1.6 ff  Cmax = 309.5 ff  G =  100  
ABC: Path 13 --    1239 : 4    1 sky130_fd_sc_hd__or4b_2   A =  10.01  Df =5017.4 -301.5 ps  S =  94.9 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 265.5 ff  G =  143  
ABC: Path 14 --    1240 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =5258.2 -224.7 ps  S = 395.9 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi13 (\data_in2 [7]).  End-point = po29 (\data_out [29]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   68/   32  lat =    0  nd =  1174  edge =   3245  area =10436.33  delay =16.00  lev = 16
ABC: + write_blif /tmp/yosys-abc-gqpbyo/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       97
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      122
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       46
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       94
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       42
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      108
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       80
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       55
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        8
ABC RESULTS:        internal signals:     1679
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       32
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 1779 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Warning: Wire alu.\data_out [31] is used but has no driver.
Warning: Wire alu.\data_out [30] is used but has no driver.
Warning: Wire alu.\data_out [29] is used but has no driver.
Warning: Wire alu.\data_out [28] is used but has no driver.
Warning: Wire alu.\data_out [27] is used but has no driver.
Warning: Wire alu.\data_out [26] is used but has no driver.
Warning: Wire alu.\data_out [25] is used but has no driver.
Warning: Wire alu.\data_out [24] is used but has no driver.
Warning: Wire alu.\data_out [23] is used but has no driver.
Warning: Wire alu.\data_out [22] is used but has no driver.
Warning: Wire alu.\data_out [21] is used but has no driver.
Warning: Wire alu.\data_out [20] is used but has no driver.
Warning: Wire alu.\data_out [19] is used but has no driver.
Warning: Wire alu.\data_out [18] is used but has no driver.
Warning: Wire alu.\data_out [17] is used but has no driver.
Warning: Wire alu.\data_out [16] is used but has no driver.
Warning: Wire alu.\data_out [15] is used but has no driver.
Warning: Wire alu.\data_out [14] is used but has no driver.
Warning: Wire alu.\data_out [13] is used but has no driver.
Warning: Wire alu.\data_out [12] is used but has no driver.
Warning: Wire alu.\data_out [11] is used but has no driver.
Warning: Wire alu.\data_out [10] is used but has no driver.
Warning: Wire alu.\data_out [9] is used but has no driver.
Warning: Wire alu.\data_out [8] is used but has no driver.
Warning: Wire alu.\data_out [7] is used but has no driver.
Warning: Wire alu.\data_out [6] is used but has no driver.
Warning: Wire alu.\data_out [5] is used but has no driver.
Warning: Wire alu.\data_out [4] is used but has no driver.
Warning: Wire alu.\data_out [3] is used but has no driver.
Warning: Wire alu.\data_out [2] is used but has no driver.
Warning: Wire alu.\data_out [1] is used but has no driver.
Warning: Wire alu.\data_out [0] is used but has no driver.
Found and reported 32 problems.

61. Printing statistics.

=== alu ===

   Number of wires:               1146
   Number of wire bits:           1242
   Number of public wires:           4
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1174
     sky130_fd_sc_hd__a2111o_2       4
     sky130_fd_sc_hd__a2111oi_2      2
     sky130_fd_sc_hd__a211o_2       15
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21bo_2       12
     sky130_fd_sc_hd__a21boi_2      25
     sky130_fd_sc_hd__a21o_2        27
     sky130_fd_sc_hd__a21oi_2       80
     sky130_fd_sc_hd__a221o_2       12
     sky130_fd_sc_hd__a221oi_2       3
     sky130_fd_sc_hd__a22o_2        17
     sky130_fd_sc_hd__a22oi_2        7
     sky130_fd_sc_hd__a2bb2o_2       3
     sky130_fd_sc_hd__a311o_2        9
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2        34
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__a32oi_2        1
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2        15
     sky130_fd_sc_hd__and2b_2       19
     sky130_fd_sc_hd__and3_2        14
     sky130_fd_sc_hd__and3b_2        1
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__and4bb_2       2
     sky130_fd_sc_hd__buf_1         94
     sky130_fd_sc_hd__inv_2         29
     sky130_fd_sc_hd__mux2_2       108
     sky130_fd_sc_hd__mux4_2        12
     sky130_fd_sc_hd__nand2_2       97
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nand3_2        5
     sky130_fd_sc_hd__nand3b_2       3
     sky130_fd_sc_hd__nand4_2        3
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2        55
     sky130_fd_sc_hd__nor3_2         3
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o2111ai_2      1
     sky130_fd_sc_hd__o211a_2       14
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2        46
     sky130_fd_sc_hd__o21ai_2       42
     sky130_fd_sc_hd__o21ba_2        4
     sky130_fd_sc_hd__o21bai_2       3
     sky130_fd_sc_hd__o221a_2        9
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        22
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2      14
     sky130_fd_sc_hd__o311a_2        4
     sky130_fd_sc_hd__o31a_2        18
     sky130_fd_sc_hd__o31ai_2        2
     sky130_fd_sc_hd__o32a_2         8
     sky130_fd_sc_hd__o41a_2         4
     sky130_fd_sc_hd__or2_2        122
     sky130_fd_sc_hd__or2b_2         6
     sky130_fd_sc_hd__or3_2         19
     sky130_fd_sc_hd__or3b_2         8
     sky130_fd_sc_hd__or4_2         22
     sky130_fd_sc_hd__or4b_2         8
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2       47
     sky130_fd_sc_hd__xor2_2        22

   Chip area for module '\alu': 10435.008000

62. Executing Verilog backend.
Dumping module `\alu'.

Warnings: 32 unique messages, 32 total
End of script. Logfile hash: fe3b157763, CPU: user 0.94s system 0.01s, MEM: 34.34 MB peak
Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)
Time spent: 75% 2x abc (2 sec), 4% 26x opt_expr (0 sec), ...
