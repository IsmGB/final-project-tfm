
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v
Parsing SystemVerilog input from `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/runs/program_counter_flow/tmp/synthesis/hierarchy.dot'.
Dumping module program_counter to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \program_counter

3.2. Analyzing design hierarchy..
Top module:  \program_counter
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \program_counter

5.2. Analyzing design hierarchy..
Top module:  \program_counter
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:11$1 in module program_counter.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

9. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:9$4'.
  Set init value: \set = 0

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:9$4'.
Creating decoders for process `\program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:11$1'.
     1/2: $0\count[11:0]
     2/2: $0\set[31:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\program_counter.\count' using process `\program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:11$1'.
  created $dff cell `$procdff$17' with positive edge clock.
Creating register for signal `\program_counter.\set' using process `\program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:11$1'.
  created $dff cell `$procdff$18' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:9$4'.
Found and cleaned up 2 empty switches in `\program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:11$1'.
Removing empty process `program_counter.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:11$1'.
Cleaned up 2 empty switches.

17. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

18. Executing FLATTEN pass (flatten design).

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

21. Executing CHECK pass (checking for obvious problems).
Checking module program_counter...
Found and reported 0 problems.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

22.9. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking program_counter.set as FSM state register:
    Register has an initialization value.

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$18 ($dff) from module program_counter (D = $procmux$12_Y, Q = \set, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$19 ($sdff) from module program_counter (D = 1, Q = \set).
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 18 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 19 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 20 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 21 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 22 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 23 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 24 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 25 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 26 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 27 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 28 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 29 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 30 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.
Setting constant 0-bit at position 31 on $auto$ff.cc:266:slice$20 ($sdffe) from module program_counter.

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.
<suppressed ~1 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module program_counter:
  creating $macc model for $add$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:19$3 ($add).
  creating $alu model for $macc $add$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:19$3.
  creating $alu cell for $add$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:19$3: $auto$alumacc.cc:485:replace_alu$22
  created 1 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.
<suppressed ~1 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$17 ($dff) from module program_counter (D = $add$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/src/program_counter.v:19$3_Y, Q = \count, rval = 12'000000000000).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

35.18. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /foss/tools/yosys/1010756/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/1010756/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using template $paramod$ee3d784672cdb1cb32d9a801a3af776716f16b74\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~265 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.
<suppressed ~16 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 21 unused cells and 32 unused wires.
<suppressed ~22 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 69 gates and 93 wires to a netlist network with 24 inputs and 12 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:                OR cells:        9
ABC RESULTS:              XNOR cells:       13
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:        8
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       12
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 0 unused cells and 63 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \program_counter

40.2. Analyzing design hierarchy..
Top module:  \program_counter
Removed 0 unused modules.

41. Printing statistics.

=== program_counter ===

   Number of wires:                 64
   Number of wire bits:            139
   Number of public wires:           5
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      17
     $_AND_                          3
     $_NAND_                         8
     $_NOR_                          8
     $_ORNOT_                        1
     $_OR_                           9
     $_SDFFE_PP0N_                   1
     $_SDFF_PN0_                    12
     $_XNOR_                        13
     $_XOR_                         10

42. Executing CHECK pass (checking for obvious problems).
Checking module program_counter...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/runs/program_counter_flow/tmp/synthesis/post_techmap.dot'.
Dumping module program_counter to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \program_counter.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\program_counter'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module program_counter.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..

47. Printing statistics.

=== program_counter ===

   Number of wires:                 64
   Number of wire bits:            139
   Number of public wires:           5
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      17
     $_AND_                          3
     $_NAND_                         8
     $_NOR_                          8
     $_ORNOT_                        1
     $_OR_                           9
     $_SDFFE_PP0N_                   1
     $_SDFF_PN0_                    12
     $_XNOR_                        13
     $_XOR_                         10

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\program_counter':
  mapped 13 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== program_counter ===

   Number of wires:                 78
   Number of wire bits:            153
   Number of public wires:           5
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     $_ANDNOT_                      17
     $_AND_                          3
     $_MUX_                         14
     $_NAND_                         8
     $_NOR_                          8
     $_ORNOT_                        1
     $_OR_                           9
     $_XNOR_                        13
     $_XOR_                         10
     sky130_fd_sc_hd__dfxtp_2       13

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\program_counter' to `/tmp/yosys-abc-XFJ2fZ/input.blif'..
Extracted 83 gates and 111 wires to a netlist network with 26 inputs and 13 outputs.

54.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/1010756/bin/yosys-abc" -s -f /tmp/yosys-abc-XFJ2fZ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-XFJ2fZ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-XFJ2fZ/input.blif 
ABC: + read_lib -w /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/runs/program_counter_flow/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/runs/program_counter_flow/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/runs/program_counter_flow/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/program_counter/runs/program_counter_flow/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: Abc_NtkFastExtract: Nodes have duplicated fanins. FX is not performed.
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 30000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 30000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 
ABC: + upsize -D 30000.0 
ABC: Current delay (1973.09 ps) does not exceed the target delay (30000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 30000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     88 ( 12.5 %)   Cap =  9.2 ff (  2.8 %)   Area =      676.90 ( 87.5 %)   Delay =  2040.49 ps  ( 14.8 %)               
ABC: Path  0 --       2 : 0    3 pi                       A =   0.00  Df =  26.4  -15.1 ps  S =  42.2 ps  Cin =  0.0 ff  Cout =   7.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      51 : 2    1 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 285.0 -165.6 ps  S =  52.3 ps  Cin =  1.5 ff  Cout =   2.5 ff  Cmax = 299.4 ff  G =  163  
ABC: Path  2 --      52 : 4    3 sky130_fd_sc_hd__a31o_2  A =   8.76  Df = 543.8 -244.4 ps  S =  67.9 ps  Cin =  2.4 ff  Cout =   8.5 ff  Cmax = 271.9 ff  G =  348  
ABC: Path  3 --      69 : 5    3 sky130_fd_sc_hd__a311o_2 A =  11.26  Df = 892.5 -394.2 ps  S =  86.6 ps  Cin =  2.3 ff  Cout =  12.6 ff  Cmax = 298.5 ff  G =  534  
ABC: Path  4 --      76 : 2    3 sky130_fd_sc_hd__and2b_2 A =   8.76  Df =1108.4 -448.9 ps  S =  57.2 ps  Cin =  1.6 ff  Cout =   7.5 ff  Cmax = 310.4 ff  G =  449  
ABC: Path  5 --      82 : 4    3 sky130_fd_sc_hd__o211a_2 A =  10.01  Df =1389.6 -516.5 ps  S =  90.1 ps  Cin =  2.4 ff  Cout =  11.8 ff  Cmax = 268.3 ff  G =  469  
ABC: Path  6 --      89 : 4    1 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =1644.1 -675.9 ps  S =  42.2 ps  Cin =  2.4 ff  Cout =   1.5 ff  Cmax = 325.0 ff  G =   63  
ABC: Path  7 --      91 : 3    1 sky130_fd_sc_hd__and3_2  A =   7.51  Df =1826.0 -142.0 ps  S =  42.1 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 309.5 ff  G =  141  
ABC: Path  8 --      92 : 1    1 sky130_fd_sc_hd__buf_1   A =   3.75  Df =2040.5  -34.2 ps  S = 396.7 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi1 (\count [1]).  End-point = po7 ($auto$rtlil.cc:2607:MuxGate$370).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   26/   13  lat =    0  nd =    88  edge =    218  area =677.05  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-XFJ2fZ/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:        internal signals:       72
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:       13
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \program_counter..
Removed 31 unused cells and 183 unused wires.
<suppressed ~63 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module program_counter...
Warning: Wire program_counter.\count [11] is used but has no driver.
Warning: Wire program_counter.\count [10] is used but has no driver.
Warning: Wire program_counter.\count [9] is used but has no driver.
Warning: Wire program_counter.\count [8] is used but has no driver.
Warning: Wire program_counter.\count [7] is used but has no driver.
Warning: Wire program_counter.\count [6] is used but has no driver.
Warning: Wire program_counter.\count [5] is used but has no driver.
Warning: Wire program_counter.\count [4] is used but has no driver.
Warning: Wire program_counter.\count [3] is used but has no driver.
Warning: Wire program_counter.\count [2] is used but has no driver.
Warning: Wire program_counter.\count [1] is used but has no driver.
Warning: Wire program_counter.\count [0] is used but has no driver.
Found and reported 12 problems.

61. Printing statistics.

=== program_counter ===

   Number of wires:                 93
   Number of wire bits:            115
   Number of public wires:           5
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     sky130_fd_sc_hd__a211o_2        3
     sky130_fd_sc_hd__a21bo_2        2
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a31o_2         4
     sky130_fd_sc_hd__and2_2        10
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         9
     sky130_fd_sc_hd__and3b_2        1
     sky130_fd_sc_hd__buf_1          9
     sky130_fd_sc_hd__dfxtp_2       13
     sky130_fd_sc_hd__inv_2          2
     sky130_fd_sc_hd__nand2_2        7
     sky130_fd_sc_hd__nor2_2         9
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o211ai_2       3
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21ai_2        3
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__or2_2         10
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__xnor2_2        2
     sky130_fd_sc_hd__xor2_2         1

   Chip area for module '\program_counter': 953.414400

62. Executing Verilog backend.
Dumping module `\program_counter'.

Warnings: 12 unique messages, 12 total
End of script. Logfile hash: 97aa69c40f, CPU: user 0.29s system 0.01s, MEM: 28.12 MB peak
Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)
Time spent: 45% 2x abc (0 sec), 19% 4x stat (0 sec), ...
