
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v
Parsing SystemVerilog input from `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v' to AST representation.
Generating RTLIL representation for module `\control_unity'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/runs/control_unity_flow/tmp/synthesis/hierarchy.dot'.
Dumping module control_unity to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \control_unity

3.2. Analyzing design hierarchy..
Top module:  \control_unity
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \control_unity

5.2. Analyzing design hierarchy..
Top module:  \control_unity
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 2 dead cases from process $proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1 in module control_unity.
Marked 16 switch rules as full_case in process $proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1 in module control_unity.
Removed a total of 2 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 9 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~16 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1'.
     1/113: $6\br_mux_inv[0:0]
     2/113: $16\br_enable[0:0]
     3/113: $16\ram_w_enable[0:0]
     4/113: $16\alu_mux_in[0:0]
     5/113: $16\alu_control[3:0]
     6/113: $16\register_w_enable[0:0]
     7/113: $15\br_enable[0:0]
     8/113: $5\br_mux_inv[0:0]
     9/113: $15\ram_w_enable[0:0]
    10/113: $15\alu_mux_in[0:0]
    11/113: $15\alu_control[3:0]
    12/113: $15\register_w_enable[0:0]
    13/113: $6\databus[2:0]
    14/113: $9\imm_rd[0:0]
    15/113: $14\br_enable[0:0]
    16/113: $14\ram_w_enable[0:0]
    17/113: $14\alu_mux_in[0:0]
    18/113: $14\alu_control[3:0]
    19/113: $14\register_w_enable[0:0]
    20/113: $5\databus[2:0]
    21/113: $13\br_enable[0:0]
    22/113: $13\ram_w_enable[0:0]
    23/113: $13\alu_mux_in[0:0]
    24/113: $13\alu_control[3:0]
    25/113: $8\imm_rd[0:0]
    26/113: $13\register_w_enable[0:0]
    27/113: $4\br_mux_inv[0:0]
    28/113: $4\databus[2:0]
    29/113: $7\imm_rd[0:0]
    30/113: $12\br_enable[0:0]
    31/113: $12\ram_w_enable[0:0]
    32/113: $12\alu_mux_out[0:0]
    33/113: $12\alu_mux_in[0:0]
    34/113: $12\alu_control[3:0]
    35/113: $12\register_w_enable[0:0]
    36/113: $3\databus[2:0]
    37/113: $11\br_enable[0:0]
    38/113: $11\ram_w_enable[0:0]
    39/113: $11\alu_mux_out[0:0]
    40/113: $11\alu_mux_in[0:0]
    41/113: $11\alu_control[3:0]
    42/113: $6\imm_rd[0:0]
    43/113: $11\register_w_enable[0:0]
    44/113: $3\br_mux_inv[0:0]
    45/113: $5\imm_rd[0:0]
    46/113: $10\br_enable[0:0]
    47/113: $10\ram_w_enable[0:0]
    48/113: $10\alu_mux_out[0:0]
    49/113: $10\alu_mux_in[0:0]
    50/113: $10\alu_control[3:0]
    51/113: $10\register_w_enable[0:0]
    52/113: $4\imm_rd[0:0]
    53/113: $9\br_enable[0:0]
    54/113: $9\ram_w_enable[0:0]
    55/113: $9\alu_mux_out[0:0]
    56/113: $9\alu_mux_in[0:0]
    57/113: $9\alu_control[3:0]
    58/113: $9\register_w_enable[0:0]
    59/113: $3\imm_rd[0:0]
    60/113: $8\br_enable[0:0]
    61/113: $8\ram_w_enable[0:0]
    62/113: $8\alu_mux_out[0:0]
    63/113: $8\alu_mux_in[0:0]
    64/113: $8\alu_control[3:0]
    65/113: $8\register_w_enable[0:0]
    66/113: $7\br_enable[0:0]
    67/113: $7\ram_w_enable[0:0]
    68/113: $7\alu_mux_out[0:0]
    69/113: $7\alu_mux_in[0:0]
    70/113: $7\alu_control[3:0]
    71/113: $2\imm_rd[0:0]
    72/113: $7\register_w_enable[0:0]
    73/113: $2\databus[2:0]
    74/113: $2\br_mux_inv[0:0]
    75/113: $6\br_enable[0:0]
    76/113: $6\ram_w_enable[0:0]
    77/113: $6\alu_mux_out[0:0]
    78/113: $6\alu_mux_in[0:0]
    79/113: $6\alu_control[3:0]
    80/113: $6\register_w_enable[0:0]
    81/113: $5\br_enable[0:0]
    82/113: $5\ram_w_enable[0:0]
    83/113: $5\alu_mux_out[0:0]
    84/113: $5\alu_mux_in[0:0]
    85/113: $5\alu_control[3:0]
    86/113: $5\register_w_enable[0:0]
    87/113: $4\br_enable[0:0]
    88/113: $4\ram_w_enable[0:0]
    89/113: $4\alu_mux_out[0:0]
    90/113: $4\alu_mux_in[0:0]
    91/113: $4\alu_control[3:0]
    92/113: $4\register_w_enable[0:0]
    93/113: $3\br_enable[0:0]
    94/113: $3\ram_w_enable[0:0]
    95/113: $3\alu_mux_out[0:0]
    96/113: $3\alu_mux_in[0:0]
    97/113: $3\alu_control[3:0]
    98/113: $3\register_w_enable[0:0]
    99/113: $2\br_enable[0:0]
   100/113: $2\ram_w_enable[0:0]
   101/113: $2\alu_mux_out[0:0]
   102/113: $2\alu_mux_in[0:0]
   103/113: $2\alu_control[3:0]
   104/113: $2\register_w_enable[0:0]
   105/113: $1\br_enable[0:0]
   106/113: $1\ram_w_enable[0:0]
   107/113: $1\alu_mux_out[0:0]
   108/113: $1\alu_mux_in[0:0]
   109/113: $1\alu_control[3:0]
   110/113: $1\register_w_enable[0:0]
   111/113: $1\databus[2:0]
   112/113: $1\br_mux_inv[0:0]
   113/113: $1\imm_rd[0:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\control_unity.\register_w_enable' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$1730
Latch inferred for signal `\control_unity.\imm_rd' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$2001
Latch inferred for signal `\control_unity.\alu_control' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$2466
Latch inferred for signal `\control_unity.\alu_mux_in' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$2931
Latch inferred for signal `\control_unity.\alu_mux_out' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$3196
Latch inferred for signal `\control_unity.\ram_w_enable' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$3373
Latch inferred for signal `\control_unity.\br_mux_inv' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$3582
Latch inferred for signal `\control_unity.\br_enable' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$3759
Latch inferred for signal `\control_unity.\databus' from process `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1': $auto$proc_dlatch.cc:427:proc_dlatch$3948

14. Executing PROC_DFF pass (convert process syncs to FFs).

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 16 empty switches in `\control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1'.
Removing empty process `control_unity.$proc$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:24$1'.
Cleaned up 16 empty switches.

17. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.
<suppressed ~1042 debug messages>

18. Executing FLATTEN pass (flatten design).

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 9 unused cells and 1448 unused wires.
<suppressed ~10 debug messages>

21. Executing CHECK pass (checking for obvious problems).
Checking module control_unity...
Found and reported 0 problems.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
<suppressed ~2025 debug messages>
Removed a total of 675 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unity.
    New ctrl vector for $pmux cell $procmux$1354: { $procmux$107_CMP $procmux$108_CMP $procmux$110_CMP $procmux$1310_CMP $procmux$1309_CMP $procmux$111_CMP $procmux$1001_CMP }
    New ctrl vector for $pmux cell $procmux$15: $auto$opt_reduce.cc:134:opt_pmux$3950
    New ctrl vector for $pmux cell $procmux$241: { $procmux$111_CMP $procmux$1310_CMP }
    New ctrl vector for $pmux cell $procmux$291: $auto$opt_reduce.cc:134:opt_pmux$3952
    New ctrl vector for $pmux cell $procmux$38: $auto$opt_reduce.cc:134:opt_pmux$3954
    New ctrl vector for $pmux cell $procmux$454: { $procmux$111_CMP $procmux$1310_CMP $procmux$110_CMP $procmux$1001_CMP }
    New ctrl vector for $pmux cell $procmux$564: $auto$opt_reduce.cc:134:opt_pmux$3956
    New ctrl vector for $pmux cell $procmux$106: { $auto$opt_reduce.cc:134:opt_pmux$3960 $auto$opt_reduce.cc:134:opt_pmux$3958 }
    New ctrl vector for $pmux cell $procmux$910: { $procmux$107_CMP $procmux$108_CMP $procmux$110_CMP $procmux$1310_CMP $procmux$1309_CMP $procmux$111_CMP $procmux$1001_CMP }
  Optimizing cells in module \control_unity.
Performed a total of 28 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 0 unused cells and 695 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unity.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unity.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 7) from port B of cell control_unity.$eq$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:26$2 ($eq).
Removed top 1 bits (of 7) from port B of cell control_unity.$eq$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:110$6 ($eq).
Removed top 2 bits (of 7) from port B of cell control_unity.$eq$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:120$7 ($eq).
Removed top 5 bits (of 7) from port B of cell control_unity.$eq$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:213$10 ($eq).
Removed top 1 bits (of 7) from port B of cell control_unity.$eq$/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/src/control_unity.v:276$11 ($eq).
Removed top 2 bits (of 4) from mux cell control_unity.$procmux$106 ($pmux).
Removed top 2 bits (of 3) from port B of cell control_unity.$procmux$111_CMP0 ($eq).
Removed top 1 bits (of 3) from mux cell control_unity.$procmux$241 ($pmux).
Removed top 1 bits (of 4) from mux cell control_unity.$procmux$405 ($mux).
Removed top 1 bits (of 4) from mux cell control_unity.$procmux$624 ($mux).
Removed top 3 bits (of 4) from mux cell control_unity.$procmux$814 ($mux).
Removed top 3 bits (of 4) from mux cell control_unity.$procmux$1284 ($mux).
Removed top 1 bits (of 3) from port B of cell control_unity.$procmux$1309_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell control_unity.$procmux$1310_CMP0 ($eq).
Removed top 1 bits (of 4) from wire control_unity.$11\alu_control[3:0].
Removed top 1 bits (of 4) from wire control_unity.$13\alu_control[3:0].
Removed top 2 bits (of 4) from wire control_unity.$15\alu_control[3:0].
Removed top 3 bits (of 4) from wire control_unity.$3\alu_control[3:0].
Removed top 3 bits (of 4) from wire control_unity.$5\alu_control[3:0].
Removed top 1 bits (of 3) from wire control_unity.$5\databus[2:0].

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module control_unity:
  created 0 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unity.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unity.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.
<suppressed ~14 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unity..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unity.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /foss/tools/yosys/1010756/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/1010756/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$33afdd83bf3811dac2de7a968d39eea5718691bc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dlatch.
No more expansions possible.
<suppressed ~354 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.
<suppressed ~221 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
<suppressed ~213 debug messages>
Removed a total of 71 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 2 unused cells and 228 unused wires.
<suppressed ~3 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\control_unity' to `<abc-temp-dir>/input.blif'..
Extracted 254 gates and 273 wires to a netlist network with 17 inputs and 20 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        3
ABC RESULTS:             ORNOT cells:       25
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:               MUX cells:       21
ABC RESULTS:               NOR cells:       23
ABC RESULTS:            ANDNOT cells:       35
ABC RESULTS:                OR cells:       91
ABC RESULTS:        internal signals:      236
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       20
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.
<suppressed ~1 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 0 unused cells and 243 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \control_unity

40.2. Analyzing design hierarchy..
Top module:  \control_unity
Removed 0 unused modules.

41. Printing statistics.

=== control_unity ===

   Number of wires:                209
   Number of wire bits:            233
   Number of public wires:          12
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $_ANDNOT_                      34
     $_AND_                          2
     $_DLATCH_N_                    14
     $_MUX_                         21
     $_NAND_                         3
     $_NOR_                         23
     $_NOT_                          4
     $_ORNOT_                       25
     $_OR_                          90

42. Executing CHECK pass (checking for obvious problems).
Checking module control_unity...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/runs/control_unity_flow/tmp/synthesis/post_techmap.dot'.
Dumping module control_unity to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_unity..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_unity.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_unity'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_unity.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..

47. Printing statistics.

=== control_unity ===

   Number of wires:                209
   Number of wire bits:            233
   Number of public wires:          12
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $_ANDNOT_                      34
     $_AND_                          2
     $_DLATCH_N_                    14
     $_MUX_                         21
     $_NAND_                         3
     $_NOR_                         23
     $_NOT_                          4
     $_ORNOT_                       25
     $_OR_                          90

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
No more expansions possible.
<suppressed ~18 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\control_unity':

53. Printing statistics.

=== control_unity ===

   Number of wires:                251
   Number of wire bits:            275
   Number of public wires:          12
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $_ANDNOT_                      34
     $_AND_                          2
     $_MUX_                         21
     $_NAND_                         3
     $_NOR_                         23
     $_NOT_                          4
     $_ORNOT_                       25
     $_OR_                          90
     sky130_fd_sc_hd__dlxtn_1       14

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\control_unity' to `/tmp/yosys-abc-2R3phG/input.blif'..
Extracted 202 gates and 219 wires to a netlist network with 17 inputs and 20 outputs.

54.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/1010756/bin/yosys-abc" -s -f /tmp/yosys-abc-2R3phG/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-2R3phG/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-2R3phG/input.blif 
ABC: + read_lib -w /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/runs/control_unity_flow/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/runs/control_unity_flow/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/runs/control_unity_flow/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /headless/Desktop/FINAL_PROJECT/OPENLANE_digital_flow/control_unity/runs/control_unity_flow/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 
ABC: + upsize -D 10000.0 
ABC: Current delay (2559.36 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     56 ( 21.4 %)   Cap = 14.4 ff (  4.5 %)   Area =      427.91 ( 78.6 %)   Delay =  2654.70 ps  (  8.9 %)               
ABC: Path  0 --       6 : 0    1 pi                         A =   0.00  Df =   6.0   -3.9 ps  S =  14.9 ps  Cin =  0.0 ff  Cout =   1.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      41 : 4    5 sky130_fd_sc_hd__or4bb_2   A =  12.51  Df = 660.6 -466.9 ps  S = 122.9 ps  Cin =  1.5 ff  Cout =  10.8 ff  Cmax = 312.2 ff  G =  680  
ABC: Path  2 --      44 : 3    4 sky130_fd_sc_hd__or3b_2    A =   8.76  Df =1173.8 -828.3 ps  S = 111.5 ps  Cin =  1.5 ff  Cout =  13.4 ff  Cmax = 269.2 ff  G =  841  
ABC: Path  3 --      62 : 5    3 sky130_fd_sc_hd__a2111oi_2 A =  15.01  Df =2036.3-1580.8 ps  S =1114.6 ps  Cin =  4.6 ff  Cout =  40.6 ff  Cmax =  56.8 ff  G =  882  
ABC: Path  4 --      63 : 2    2 sky130_fd_sc_hd__nor2_2    A =   6.26  Df =2288.3-1460.9 ps  S = 399.1 ps  Cin =  4.4 ff  Cout =  35.9 ff  Cmax = 141.9 ff  G =  809  
ABC: Path  5 --      64 : 3    1 sky130_fd_sc_hd__a21o_2    A =   8.76  Df =2654.7 -792.4 ps  S = 174.6 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 309.5 ff  G = 1422  
ABC: Start-point = pi5 (\opcode [3]).  End-point = po2 ($abc$4815$auto$rtlil.cc:2403:ReduceOr$1998).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   17/   20  lat =    0  nd =    56  edge =    143  area =427.94  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-2R3phG/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        3
ABC RESULTS:        internal signals:      182
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       20
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_unity..
Removed 0 unused cells and 261 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module control_unity...
Warning: Wire control_unity.\register_w_enable is used but has no driver.
Warning: Wire control_unity.\ram_w_enable is used but has no driver.
Warning: Wire control_unity.\imm_rd is used but has no driver.
Warning: Wire control_unity.\databus [2] is used but has no driver.
Warning: Wire control_unity.\databus [1] is used but has no driver.
Warning: Wire control_unity.\databus [0] is used but has no driver.
Warning: Wire control_unity.\br_mux_inv is used but has no driver.
Warning: Wire control_unity.\br_enable is used but has no driver.
Warning: Wire control_unity.\alu_mux_out is used but has no driver.
Warning: Wire control_unity.\alu_mux_in is used but has no driver.
Warning: Wire control_unity.\alu_control [3] is used but has no driver.
Warning: Wire control_unity.\alu_control [2] is used but has no driver.
Warning: Wire control_unity.\alu_control [1] is used but has no driver.
Warning: Wire control_unity.\alu_control [0] is used but has no driver.
Found and reported 14 problems.

61. Printing statistics.

=== control_unity ===

   Number of wires:                 68
   Number of wire bits:             87
   Number of public wires:          12
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21o_2         3
     sky130_fd_sc_hd__a21oi_2        4
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__and2_2         3
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1          8
     sky130_fd_sc_hd__dlxtn_1       14
     sky130_fd_sc_hd__inv_2          4
     sky130_fd_sc_hd__nand2_2        2
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2         3
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21ai_2        2
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__or2_2          4
     sky130_fd_sc_hd__or2b_2         2
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or3b_2         3
     sky130_fd_sc_hd__or4_2          2
     sky130_fd_sc_hd__or4bb_2        1

   Chip area for module '\control_unity': 638.112000

62. Executing Verilog backend.
Dumping module `\control_unity'.

Warnings: 14 unique messages, 14 total
End of script. Logfile hash: 0b52c9f4b6, CPU: user 0.48s system 0.00s, MEM: 29.23 MB peak
Yosys 0.27+30 (git sha1 101075611, gcc 11.3.0-1ubuntu1~22.04.1 -fPIC -Os)
Time spent: 40% 2x abc (0 sec), 12% 4x stat (0 sec), ...
