$date
	Sat Oct 14 14:32:37 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module register_tb $end
$var wire 32 ! data_out2 [31:0] $end
$var wire 32 " data_out1 [31:0] $end
$var reg 1 # clk $end
$var reg 5 $ data_addr [4:0] $end
$var reg 5 % data_addr1 [4:0] $end
$var reg 5 & data_addr2 [4:0] $end
$var reg 32 ' data_in [31:0] $end
$var reg 1 ( reset $end
$var reg 1 ) w_enable $end
$scope module DUT $end
$var wire 1 # clk $end
$var wire 5 * data_addr [4:0] $end
$var wire 5 + data_addr1 [4:0] $end
$var wire 5 , data_addr2 [4:0] $end
$var wire 32 - data_in [31:0] $end
$var wire 1 ( reset $end
$var wire 1 ) w_enable $end
$var reg 32 . data_out1 [31:0] $end
$var reg 32 / data_out2 [31:0] $end
$var integer 32 0 set [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 1 i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 2 i [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 3 i [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 4 \memory[0] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 5 \memory[1] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 6 \memory[2] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 7 \memory[3] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 8 \memory[4] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 9 \memory[5] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 : \memory[6] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 ; \memory[7] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 < \memory[8] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 = \memory[9] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 > \memory[10] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 ? \memory[11] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 @ \memory[12] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 A \memory[13] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 B \memory[14] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 C \memory[15] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 D \memory[16] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 E \memory[17] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 F \memory[18] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 G \memory[19] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 H \memory[20] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 I \memory[21] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 J \memory[22] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 K \memory[23] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 L \memory[24] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 M \memory[25] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 N \memory[26] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 O \memory[27] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 P \memory[28] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 Q \memory[29] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 R \memory[30] [31:0] $end
$upscope $end
$upscope $end
$scope module register_tb $end
$scope module DUT $end
$var reg 32 S \memory[31] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
b100000 3
bx 2
bx 1
b0 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
x(
bx '
bx &
bx %
bx $
0#
bx "
bx !
$end
#10
b0 4
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b1 0
b100000 2
1#
#20
0#
b100 $
b100 *
b11111111111111111111111111111111 '
b11111111111111111111111111111111 -
#30
b0 4
1#
#40
0#
1)
#50
b0 4
b11111111111111111111111111111111 8
1#
#60
b11111111111111111111111111111111 !
b11111111111111111111111111111111 /
b0 "
b0 .
0#
b100 &
b100 ,
b0 %
b0 +
#70
b0 4
b11111111111111111111111111111111 8
1#
#80
0#
b0 $
b0 *
#90
b0 4
1#
#100
0#
1(
#110
b0 4
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 0
b100000 1
1#
#120
b0 !
b0 /
0#
0(
#130
b0 4
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b1 0
b100000 2
1#
#140
0#
#150
b0 4
1#
#160
0#
